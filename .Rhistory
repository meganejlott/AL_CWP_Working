?broom
## Load Packages
library(haven)  # read in Stata-format data
library(tableone)
library(lubridate)  # helps deal with dates
library(readxl)  # in case you need to read in excel files
library(writexl)  # in case you want to write new excel files
library(broom)  # functions for summarizing models
# always load `tidyverse` last to avoid package conflicts
library(tidyverse)  # set of packages that help you work with data in "tidy" format
## Options
options(dplyr.summarise.inform = FALSE)  # stops one function from talking too much
## Define general functions
`%notin%` = function(x,y) !(x %in% y)
?broom
DR_data = data.frame(dose = c(90000, 9000, 900, 90, 9, 0.9, 0.09, 0.009),
pos = c(3,5,7,8,8,1,0,0),
neg = c(0,2,1,1,3,6,7,7))
View(DR_data)
DR_data = data.frame(dose = c(90000, 9000, 900, 90, 9, 0.9, 0.09, 0.009),
pos = c(3,5,7,8,8,1,0,0),
neg = c(0,2,1,1,3,6,7,7))
DR_Data_original = DR_data
dose = DR_data$dose
positive = DR_data$pos
negative = DR_data$neg
BP_Iter = 1000
oprob = (positive/(positive+negative))
View(DR_data)
#define deviance functions
deviance.expntl = function(logk) {
eps = 1e-15
k = exp(logk)
obsf = DR_Data$pos/(DR_Data$pos + DR_Data$neg)
dose = DR_Data$dose
pos = DR_Data
neg = DR_Data$neg
pred = expntl.dr(k, dose)
y1 = sum(pos*log(pred/(obsf+eps)));
y2 = sum(neg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.bp = function (logalpha, logN50) {
eps = 1e-15;
alpha = exp(logalpha)
N50 = exp(logN50)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = br.dr(alpha, N50, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.ex.bp = function (loga, logb) {
eps = 1e-15;
alpha = exp(loga)
N50 = exp(logb)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = ex.bp.dr(a,b, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
DR_Data = data.frame(dose = c(90000, 9000, 900, 90, 9, 0.9, 0.09, 0.009),
pos = c(3,5,7,8,8,1,0,0),
neg = c(0,2,1,1,3,6,7,7))
DR_Data_original = DR_data
dose = DR_data$dose
positive = DR_data$pos
negative = DR_data$neg
BP_Iter = 1000
oprob = (positive/(positive+negative))
#define dose response models as functions
expntl.dr = function(k, dose){1-exp(-k*dose)}
bp.dr = function(alpha, N50, dose){
1-(1+dose/N50)*(2^(1/alpha)-1)^(-alpha)}
exp.br.dr = function(a,b,dose) 1-hyperg_1F1(a,a+b,-dose)
#define deviance functions
deviance.expntl = function(logk) {
eps = 1e-15
k = exp(logk)
obsf = DR_Data$pos/(DR_Data$pos + DR_Data$neg)
dose = DR_Data$dose
pos = DR_Data
neg = DR_Data$neg
pred = expntl.dr(k, dose)
y1 = sum(pos*log(pred/(obsf+eps)));
y2 = sum(neg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.bp = function (logalpha, logN50) {
eps = 1e-15;
alpha = exp(logalpha)
N50 = exp(logN50)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = br.dr(alpha, N50, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.ex.bp = function (loga, logb) {
eps = 1e-15;
alpha = exp(loga)
N50 = exp(logb)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = ex.bp.dr(a,b, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
results2 = mle(deviance.expntl, start = list(logk = -0.1),
method = "CG")
library(stats4)
library(boot)
library(car)
library(gsl)
library(ggplot2)
#set up data
DR_Data = data.frame(dose = c(90000, 9000, 900, 90, 9, 0.9, 0.09, 0.009),
pos = c(3,5,7,8,8,1,0,0),
neg = c(0,2,1,1,3,6,7,7))
DR_Data_original = DR_data
dose = DR_data$dose
positive = DR_data$pos
negative = DR_data$neg
BP_Iter = 1000
oprob = (positive/(positive+negative))
#define dose response models as functions
expntl.dr = function(k, dose){1-exp(-k*dose)}
bp.dr = function(alpha, N50, dose){
1-(1+dose/N50)*(2^(1/alpha)-1)^(-alpha)}
exp.br.dr = function(a,b,dose) 1-hyperg_1F1(a,a+b,-dose)
#define deviance functions
deviance.expntl = function(logk) {
eps = 1e-15
k = exp(logk)
obsf = DR_Data$pos/(DR_Data$pos + DR_Data$neg)
dose = DR_Data$dose
pos = DR_Data
neg = DR_Data$neg
pred = expntl.dr(k, dose)
y1 = sum(pos*log(pred/(obsf+eps)));
y2 = sum(neg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.bp = function (logalpha, logN50) {
eps = 1e-15;
alpha = exp(logalpha)
N50 = exp(logN50)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = br.dr(alpha, N50, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
dev.ex.bp = function (loga, logb) {
eps = 1e-15;
alpha = exp(loga)
N50 = exp(logb)
dose = DR_Data$dose
obspos = DR_Data$pos
obsneg = DR_Data$neg
obsf = obspos/(obspos+obsneg);
pred = ex.bp.dr(a,b, dose);
y1 = sum(obspos*log(pred/(obsf+eps)));
y2 = sum(obsneg*log((1-pred+eps)/(1-obsf+eps)))
return(-1*(y1+y2))
}
results2 = mle(deviance.expntl, start = list(logk = -0.1),
method = "CG")
EXP_MLE = matrix(ncol = 3, nrow = 1)
YEget = logLik(results2)
YE = 2*YEget[[1]]
j = coef(results2)
logk = j["logk"]
k = exp(logk)
Exp_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP[,3] = EXP_ID50;
Exp_ID50 = (log(-1/(0.5-1))/k)
results2 = mle(deviance.expntl, start = list(logk = -0.1),
method = "CG")
EXP_MLE = matrix(ncol = 3, nrow = 1)
YEget = logLik(results2)
YE = 2*YEget[[1]]
j = coef(results2)
logk = j["logk"]
k = exp(logk)
Exp_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP[,3] = EXP_ID50;
EXP_MLE = matrix(ncol = 3, nrow = 1)
YEget = logLik(results2)
YE = 2*YEget[[1]]
j = coef(results2)
logk = j["logk"]
k = exp(logk)
Exp_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP[,3] = EXP_ID50;
colnames(EXP_MLE) = c("Minimized Deviance", "k Parameter", "50% Probability")
rownames(EXP_MLE) = ("")
EXP_MLE = matrix(ncol = 3, nrow = 1)
YEget = logLik(results2)
YE = 2*YEget[[1]]
j = coef(results2)
logk = j["logk"]
k = exp(logk)
EXP_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP[,3] = EXP_ID50;
EXP_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP[,3] = EXP_ID50;
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP_MLE[,3] = EXP_ID50;
colnames(EXP_MLE) = c("Minimized Deviance", "k Parameter", "50% Probability")
rownames(EXP_MLE) = ("")
EXP_MLE = matrix(ncol = 3, nrow = 1)
YEget = logLik(results2)
YE = 2*YEget[[1]]
j = coef(results2)
logk = j["logk"]
k = exp(logk)
EXP_ID50 = (log(-1/(0.5-1))/k)
EXP_MLE[,1] = YE; EXP_MLE[,2]=k; EXP_MLE[,3] = EXP_ID50;
colnames(EXP_MLE) = c("Minimized Deviance", "k Parameter", "50% Probability")
rownames(EXP_MLE) = ("")
View(results2)
View(EXP_MLE)
View(EXP_MLE)
setwd("C:/Users/13216/Documents/Brown Lab/Alabama CWP/AL_CWP_Working")
#Load libraries
library(tidyverse)
library(ggpubr)
library(reshape2)
#Load (RT-)qPCR data from TaqMan Array Cards
stds_1 = read_delim("./data/raw_data/stds/2023-07-03_AL_STDC_1.txt")
stds_2 = read_delim("./data/raw_data/stds/2023-07-03_AL_STDC_2.txt")
stds_3 = read_delim("./data/raw_data/stds/2023-07-03_AL_STDC_3.txt")
View(stds_1)
starting_quant = read_csv("./data/raw_data/stds/targets_starting_quant.csv")
View(starting_quant)
quantity = starting_quant %>%
mutate("10^6" = starting_quant) %>%
mutate("10^5" = starting_quant/10) %>%
mutate("10^4" = starting_quant/100) %>%
mutate("10^3" = starting_quant/1000) %>%
mutate("10^2" = starting_quant/10000) %>%
mutate("10" =   starting_quant/100000) %>%
mutate("1" =    starting_quant/1000000) %>%
drop_na() %>%
select(-plasmid, -starting_quant) %>%
pivot_longer(!`Target Name`, names_to = "Sample Name", values_to = "quantity")
View(quantity)
#Standard curve from Machine 1
stds_1 = stds_1 %>%
select('Sample Name', 'Target Name', 'CT') %>%
left_join(quantity, by = c("Target Name","Sample Name")) %>%
drop_na() %>%
mutate(CT = as.numeric(CT)) %>%
mutate(log_quant = log10(quantity)) %>%
mutate(machine = "one")
names(stds_1) = c("sample", "target", "ct", "quant", "log_quant", "machine")
#Standard curve from Machine 2
stds_2 = stds_2 %>%
select('Sample Name', 'Target Name', 'CT') %>%
left_join(quantity, by = c("Target Name","Sample Name")) %>%
drop_na() %>%
mutate(CT = as.numeric(CT)) %>%
mutate(log_quant = log10(quantity)) %>%
mutate(machine = "two")
names(stds_2) = c("sample", "target", "ct", "quant", "log_quant", "machine")
#Standard curve from Machine 3
stds_3 = stds_3 %>%
select('Sample Name', 'Target Name', 'CT') %>%
left_join(quantity, by = c("Target Name","Sample Name")) %>%
drop_na() %>%
mutate(CT = as.numeric(CT)) %>%
mutate(log_quant = log10(quantity)) %>%
mutate(machine = "three")
names(stds_3) = c("sample", "target", "ct", "quant", "log_quant", "machine")
#Combine standard curves
stds = rbind(stds_1, stds_2, stds_3)
stds = stds %>%
drop_na() %>%
filter(target != "ascaris_lumbricoides") #This assay is not functioning
#Calculate the standard curve(s)
##Create dataframes for target and machine variables
targets = stds %>% select(target) %>% unique()
machines = stds %>% select(machine) %>% unique()
#If you want to calculate based off of all three curves
##Set up empty dataframe
results = data.frame(matrix(ncol = 5, nrow = 0))
##Provide column names
colnames(results) = c('machine', 'target', 'slope', 'intercept', 'r.squared')
for(i in 1:nrow(targets)){
results[i,1] = "all"
results[i,2] = targets[i,1]
results[i,3] = summary(lm(ct ~ log_quant, na.action=na.exclude, stds[stds$target == unlist(targets[i,]),]))$coefficients[2,1]
results[i,4] = summary(lm(ct ~ log_quant, na.action=na.exclude, stds[stds$target == unlist(targets[i,]),]))$coefficients[1,1]
results[i,5] = summary(lm(ct ~ log_quant, na.action=na.exclude, stds[stds$target == unlist(targets[i,]),]))$r.squared
}
#write_csv(results, "./data/processed_data/standard_curves_all.csv")
#If you want one curve per machine
##Set up empty dataframe
results = data.frame(matrix(ncol = 5, nrow = 0))
##Provide column names
colnames(results) = c('machine', 'target', 'slope', 'intercept', 'r.squared')
for(i in 1:nrow(machines)){
for(j in 1:nrow(targets)){
machine = machines[i,1]
target = targets[j,1]
slope = summary(lm(ct ~ log_quant,
na.action=na.exclude,
stds[stds$target == unlist(targets[j,]) & stds$machine == unlist(machines[i,]),]))$coefficients[2,1]
intercept = summary(lm(ct ~ log_quant,
na.action=na.exclude,
stds[stds$target == unlist(targets[j,]) & stds$machine == unlist(machines[i,]),]))$coefficients[1,1]
r.squared = summary(lm(ct ~ log_quant,
na.action=na.exclude,
stds[stds$target == unlist(targets[j,]) & stds$machine == unlist(machines[i,]),]))$r.squared
output = data.frame(machine, target, slope, intercept, r.squared)
results = rbind(results, output)
}
}
View(results)
#Calculate the PCR efficiency
results = results %>%
mutate(efficiency = 10^-(1/slope))
#Add in the number of points used
results %>%
left_join(
stds %>%
group_by(machine, target) %>%
tally())
#Calculate the PCR efficiency
results = results %>%
mutate(efficiency = 10^-(1/slope))-1*100
#Calculate the PCR efficiency
results = results %>%
mutate(efficiency = (10^-(1/slope))-1)*100
#Calculate the PCR efficiency
results = results %>%
mutate(efficiency = (10^-(1/slope)-1)*100)
#Add in the number of points used
results %>%
left_join(
stds %>%
group_by(machine, target) %>%
tally())
